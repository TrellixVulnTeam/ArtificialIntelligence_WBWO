import math
class Synapse :
    # feature
    # methods
    def  getWeight(self) :
        return self.weight
    def  getDeltaWeight(self) :
        return self.deltaWeight
    def setDeltaWeight(self, value) :
        self.deltaWeight = value
    def setWeight(self, value) :
        self.weight = value
class Neuron :
    # features
    # learning rate of neuron
    # momentum
    # constructor
    def __init__(self, eta,  alpha,  numberOfWeightsFromNextNeuron,  neuronId) :
        self.eta = eta
        self.alpha = alpha
        self.numberOfWeightsFromNextNeuron = numberOfWeightsFromNextNeuron
        self.neuronId = neuronId
        self.gradient = 0.0
        self.weights =  []
        wI = 0
        while (wI < numberOfWeightsFromNextNeuron) :
            self.weights.append(Synapse())
            self.weights[wI].setWeight( java.util.Random().nextDouble())
            wI += 1
    # methods
    # observe stuff about neuron
    def  getOutcome(self) :
        return self.outcome
    def  getGradient(self) :
        return self.gradient
    def  getWeights(self) :
        return self.weights
    def  getActivation(self, value) :
        return math.tanh(value)
    def  getPrimeActivation(self, value) :
        return 1 - math.pow(math.tanh(value),2)
    def  getDistributedWeight(self, nextLayer) :
        sigma = 0.0
        # this neuron's weights * the gradient of other neurons
        nLI = 0
        while (nLI < len(nextLayer) - 1) :
sigma += self.getWeights()[nLI].getWeight() * nextLayer[nLI].getGradient()    nLI += 1
        return sigma
    # modify stuff about neuron
    def setOutcome(self, value) :
        self.outcome = value
    def setGradient(self, value) :
        self.gradient = value
    def setHiddenGradient(self, nextLayer) :
        delta = self.getDistributedWeight(nextLayer)
        self.setGradient(self.getPrimeActivation(self.outcome) * delta)
    def setOutcomeGradient(self, target) :
        delta = target - self.outcome
        self.setGradient(self.getPrimeActivation(self.outcome) * delta)
    def doForwardPropagation(self, priorLayer) :
        sigma = 0.0
        # other layer weights * other layer outcome
        pLI = 0
        while (pLI < len(priorLayer)) :
sigma += priorLayer[pLI].getWeights()[self.neuronId].getWeight() * priorLayer[pLI].getOutcome()    pLI += 1
        self.setOutcome(self.getActivation(sigma))
    def updateWeight(self, priorLayer) :
        pLI = 0
        while (pLI < len(priorLayer)) :
            priorDeltaWeight = priorLayer[pLI].getWeights()[self.neuronId].getDeltaWeight()
            # FORM: ( eta * this gradient * outcome ) + ( alpha * priorDeltaWeight )
            newDeltaWeight = (self.eta * self.getGradient() * priorLayer[pLI].getOutcome()) + (self.alpha * priorDeltaWeight)
            # set our delta weight
            priorLayer[pLI].getWeights()[self.neuronId].setDeltaWeight(newDeltaWeight)
            # set our weights
            priorLayer[pLI].getWeights()[self.neuronId].setWeight(priorLayer[pLI].getWeights()[self.neuronId].getWeight() + newDeltaWeight)
            pLI += 1
class Layer([]) :
class Layers([]) :
class Architecture([]) :
    # features
    # constructor
    #  "2,2,1"
    def __init__(self, description) :
        descriptionList = description.split(",")
        dLI = 0
        while (dLI < len(descriptionList)) :
self.add(int(descriptionList[dLI]))    dLI += 1
class NeuralNetwork :
    # features
    eta = 0.2
    alpha = 0.5
    layers = Layers()
    architecture = Architecture("2,2,1")
    # constructor
    def __init__(self) :
        lSI = 0
        while (lSI < len(self.architecture)) :
            self.layers.append(Layer())
            lI = 0
            while (lI <= self.architecture[lSI]) :
                # Neuron ( double eta, double alpha, int numberOfWeightsFromNextNeuron, int neuronId )
                # FORM
                # IF lSI + 1 < architecture.size ( )
                # arch ( lSI + 1 )
                # else
                # 0
                numberOfWeightsFromNextNeuron = self.architecture[lSI + 1] if lSI + 1 < len(self.architecture) else 0
                newNeuron = Neuron(self.eta, self.alpha, numberOfWeightsFromNextNeuron, lI)
                self.layers[lSI].append(newNeuron)
                self.layers[lSI][len(self.layers[lSI]) - 1].setOutcome(1.0)
                lI += 1
            lSI += 1
    # do forward propagation
    def doForwardPropagation(self, inputs) :
        # pass inputs to 1st layer of neural network
        print("layers beeeefore = : " + str(self.layers))
        iI = 0
        while (iI < len(inputs)) :
self.layers[0][iI].setOutcome(inputs[iI])    iI += 1
        #
        lSI = 1
        while (lSI < len(self.architecture)) :
            priorLayer = self.layers[lSI - 1]
            lI = 0
            while (lI < self.architecture[lSI]) :
                self.layers[lSI][lI].doForwardPropagation(priorLayer)
                lI += 1
            lSI += 1
    # backward propagation
    def doBackwardPropagation(self, target) :
        # set outcome gradient
        outcomeNeuron = self.layers[len(self.layers) - 1][0]
        outcomeNeuron.setOutcomeGradient(target)
        # set hidden gradient
        lSI = len(self.layers) - 2
        while (lSI > 0) :
            currentLayer = self.layers[lSI]
            nextLayer = self.layers[lSI + 1]
            lI = 0
            while (lI < len(currentLayer)) :
currentLayer[lI].setHiddenGradient(nextLayer)    lI += 1
            lSI -= 1
        # update weights
        lSI = len(self.layers) - 1
        while (lSI > 0) :
            currentLayer = self.layers[lSI]
            priorLayer = self.layers[lSI - 1]
            lI = 0
            while (lI < len(currentLayer) - 1) :
currentLayer[lI].updateWeight(priorLayer)    lI += 1
            lSI -= 1
    # get outcome of neural network
    def  getOutcome(self) :
        return self.layers[len(self.layers) - 1][0].getOutcome()
class RunNeuralNetwork :
    # features
    neuralNetwork = NeuralNetwork()
    userScanner =  "Python-inputs"
    # main function
    @staticmethod
    def main( anything) :
        self.doTraining()
        self.showMainMenu()
    # test the neural network
    @staticmethod
    def showMainMenu() :
        print("Universal Ai Diploma Neural Network")
        print("1. Get neural answer for xor input 0, 0 ")
        print("2. Get neural answer for xor input 0, 1 ")
        print("3. Get neural answer for xor input 1, 0 ")
        print("4. Get neural answer for xor input 1, 1 ")
        print("Select a number to proceed... ")
        option = input()
        if (option==1):
                inputs = [0, 0]
                self.neuralNetwork.doForwardPropagation(inputs)
                answer = self.neuralNetwork.getOutcome()
                print("Answer for input 0,0 is : " + str(answer))
                self.returnToMainMenu()
        elif(option==2):
                inputs = [0, 1]
                self.neuralNetwork.doForwardPropagation(inputs)
                answer = self.neuralNetwork.getOutcome()
                print("Answer for input 0,1 is : " + str(answer))
                self.returnToMainMenu()
        elif(option==3):
                inputs = [1, 0]
                self.neuralNetwork.doForwardPropagation(inputs)
                answer = self.neuralNetwork.getOutcome()
                print("Answer for input 1,0 is : " + str(answer))
                self.returnToMainMenu()
        elif(option==4):
                inputs = [1, 1]
                self.neuralNetwork.doForwardPropagation(inputs)
                answer = self.neuralNetwork.getOutcome()
                print("Answer for input 1,1 is : " + str(answer))
                self.returnToMainMenu()
        elif(option==5):
                System.exit(0)
    @staticmethod
    def returnToMainMenu() :
        input()
        self.showMainMenu()
    @staticmethod
    def doTraining() :
        trainingData = self.getTrainingData()
        tDI = 0
        while (tDI < len(trainingData)) :
            # forward prop
            trainingInputLine = trainingData[tDI].split("::")[0]
            firstInput = int(trainingInputLine.split(",")[0])
            secondInput = int(trainingInputLine.split(",")[1])
            inputs = [firstInput, secondInput]
            self.neuralNetwork.doForwardPropagation(inputs)
            # backward propagation
            outputValuePerTrainingLine = int(trainingData[tDI].split("::")[1])
            self.neuralNetwork.doBackwardPropagation(outputValuePerTrainingLine)
            tDI += 1
    @staticmethod
    def  getTrainingData() :
        returnValue =  []
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        returnValue.append("1,0::1")
        returnValue.append("1,1::0")
        returnValue.append("1,1::0")
        returnValue.append("0,0::0")
        returnValue.append("0,1::1")
        return returnValue


if __name__=="__main__":
    RunNeuralNetwork.main([])